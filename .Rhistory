setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project")
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project")
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","dataset.zip")
#unzip("dataset.zip")
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project/UCI HAR Dataset")
#Leemos train data
x_train <- read.csv("/X_train.txt")
#Leemos train data
x_train <- read.csv("../X_train.txt")
#Leemos train data
x_train <- read.csv("./X_train.txt")
#Leemos train data
x_train <- read.csv("./train/X_train.txt")
head(x_train)
#Leemos train data
x_train <- read.table("./train/X_train.txt",sep=" ")
#Leemos train data
x_train <- read.table("./train/X_train.txt",sep=",")
View(x_train)
dim(x_train)
x_train[1,]
?strsplit
strsplit(x_train[1,]," ")
strsplit(x_train[1,1]," ")
strsplit(as.character(x_train[1,1])," ")
length(strsplit(as.character(x_train[1,1])," "))
dim(strsplit(as.character(x_train[1,1])," "))
size(strsplit(as.character(x_train[1,1])," "))
(strsplit(as.character(x_train[1,1])," "))
(strsplit(as.character(x_train[1,1])," "))[[1]]
dim((strsplit(as.character(x_train[1,1])," "))[[1]])
(strsplit(as.character(x_train[1,1])," "))
class(strsplit(as.character(x_train[1,1])," "))
test <- (strsplit(as.character(x_train[1,1])," "))
str(test)
str[[1]]
test[[1]]
class(test[[1]])
dim(test[[1]])
dim(test[1])
length(test[1])
test[1]
test[1][1]
test[[1]][1]
dim(test[[1]])
(test[[1]]).length
a <- (test[[1]])
class(a)
a[1:10]
size(a)
length(a)
test <- (strsplit(as.character(x_train[2,1])," "))
a <- (test[[1]])
length(a)
a
test <- (strsplit(as.character(x_train[1,1])," "))
test
#Leemos train data
x_train <- read.table("./train/X_train.txt",sep=",")
dim(x_train)
x_train[1,1]
a <- (test[[1]])
length(a)
a[1]
a[662]
a
plot(a)
x_train_split <- strsplit(as.character(x_train[,1])," ")
class(x_train_split)
sim(x_train_split)
dim(x_train_split)
str(x_train_split)
length(x_train_split)
x_train_split <- as.numeric(strsplit(as.character(x_train[,1])," "))
x_train_split <- (strsplit(as.character(x_train[,1])," ")
x_train_split <- (strsplit(as.character(x_train[,1])," "))
x_train_split <- (strsplit(as.character(x_train[,1])," "))
x_train[,1]
y_train <- read.table("./train/Y_train.txt",sep=",")
View(y_train)
class(y_train)
#Leemos train data
x_train <- read.table("./train/X_train.txt")
x_test <- read.table("./train/X_test.txt")
x_test <- read.table("./test/X_test.txt")
View(x_test)
x <- rbind(x_train,x_test)
#Read and fusion y data
y_train <- read.table("./train/Y_train.txt")
y_test <- read.table("./test/Y_test.txt")
y <- rbind(y_train,y_test)
#Read and fusion subject data
subject_train <- read.table("./train/subject_train.txt")
subject_test <- read.table("./test/subject_test.txt")
subject <- rbind(subject_train,subject_test)
head(x)
head(y)
head(subject)
#Read features names
features <- read.table("features.txt")
head(features)
#Read activity labels
activity_labels <- read.table("activity_labels.txt")
head(activity_labels)
activity_labels
#Create one data set
df <- data.frame(
subject = subject,
y = y,
x = x
)
#Create one data set
library(data.table)
df <- data.table(
subject = subject,
y = y,
x = x
)
names(df)[1:10]
#Create one data set
dt <- data.table(
subject,
y,
x
)
names(dt) <- c("subject","activity",features[,1])
head(names(dt)[1:20])
names(dt) <- c("subject","activity",features[,2])
head(names(dt)[1:20])
rm(df)
rm(x_train,x_test,x)
rm(subject_train,subject_test,subject)
rm(y_train,y_test,y)
View(features)
features[,2]
names(dt) <- c("subject","activity",features[,2])
head(names(dt)[1:20])
class(features[,2])
class(as.character(features[,2]))
names(dt) <- c("subject","activity",as.character(features[,2]))
head(names(dt)[1:20])
names(dt) <- c("subject","activity",tolower(as.character(features[,2])))
head(names(dt)[1:20])
head(dt[,10])
head(dt[,1:10])
grep("mean",names(dt))
grep("mean",names(dt),value=T)
grep("mean|std",names(dt),value=T)
grepl("mean|std",names(dt))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
dt[,c(T,T,grepl("mean|std",names(dt)))]
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
head(dt[,c("subject","activity",grep("mean|std",names(dt)),value=T)])
c("subject","activity",grep("mean|std",names(dt))
c("subject","activity",grep("mean|std",names(dt),value=T))
c("subject","activity",grep("mean|std",names(dt),value=T))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
head(dt[,c("subject","activity",grep("mean|std",names(dt),value=T))])
dt[1:10,c("subject","activity")]
grep("mean|std",names(dt),value=T)
c("subject","activity",grep("mean|std",names(dt),value=T))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
dt[1:10,c("subject","activity",grep("mean|std",names(dt),value=T))]
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
dt[1:10,c("subject","activity",grep("mean|std",names(dt),value=T))]
#Libraries
library(data.table)
#Setting working directory
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project")
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","dataset.zip")
#unzip("dataset.zip")
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project/UCI HAR Dataset")
#Read and fusion x data
x_train <- read.table("./train/X_train.txt")
x_test <- read.table("./test/X_test.txt")
x <- rbind(x_train,x_test)
#Read and fusion y data
y_train <- read.table("./train/Y_train.txt")
y_test <- read.table("./test/Y_test.txt")
y <- rbind(y_train,y_test)
#Read and fusion subject data
subject_train <- read.table("./train/subject_train.txt")
subject_test <- read.table("./test/subject_test.txt")
subject <- rbind(subject_train,subject_test)
#Read features names
features <- read.table("features.txt")
#Read activity labels
activity_labels <- read.table("activity_labels.txt")
#Create one data set
dt <- cbind(subject,y,x)
View(dt)
rm(x_train,x_test,x)
rm(y_train,y_test,y)
rm(subject_train,subject_test,subject)
tolower(as.character(features[,2]))
length(names(dt))
length(c("subject","activity",tolower(as.character(features[,2]))))
names(dt) <- c("subject","activity",tolower(as.character(features[,2])))
c("subject","activity",grep("mean|std",names(dt),value=T))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
dt[1:10,c("subject","activity",grep("mean|std",names(dt),value=T))]
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
#3. Uses descriptive activity names to name the activities in the data set
dt[1:10,"activity"]
#3. Uses descriptive activity names to name the activities in the data set
unique(dt[,"activity"])
library(dplyr)
View(activity_labels)
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
names(dt.mean.std)
head(dt.mean.std[,c("activity","V2")])
tail(dt.mean.std[,c("activity","V2")])
rename(dt.mean.std,"V2","activity2")
rename(dt.mean.std,activity2=V2)
names(dt.mean.std)
rename(dt.mean.std,activity2=V2)
#Libraries
library(data.table)
library(dplyr)
#Setting working directory
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project")
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","dataset.zip")
#unzip("dataset.zip")
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project/UCI HAR Dataset")
#1. Merges the training and the test sets to create one data set.
#Read and fusion x data
x_train <- read.table("./train/X_train.txt")
x_test <- read.table("./test/X_test.txt")
x <- rbind(x_train,x_test)
#Read and fusion y data
y_train <- read.table("./train/Y_train.txt")
y_test <- read.table("./test/Y_test.txt")
y <- rbind(y_train,y_test)
#Read and fusion subject data
subject_train <- read.table("./train/subject_train.txt")
subject_test <- read.table("./test/subject_test.txt")
subject <- rbind(subject_train,subject_test)
#Read features names
features <- read.table("features.txt")
#Read activity labels
activity_labels <- read.table("activity_labels.txt")
#Create one data set with identity of each individual + inputs(x) + output(y)
dt <- cbind(subject,y,x)
#Remove datasets to increase available memory
rm(x_train,x_test,x)
rm(y_train,y_test,y)
rm(subject_train,subject_test,subject)
#4. Appropriately labels the data set with descriptive variable names.
# I prefer to change names before filtering data, as it is much easy then to work with the data
# We assign the first two names directly and we get the names of the features from the features dataset, transforming to lower case
names(dt) <- c("subject","activity",tolower(as.character(features[,2])))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
?merge
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
head(dt.mean.std)
names(dt.mean.std)
rename(dt.mean.std,activity2=V2)
names(dt.mean.std)
dt.mean.std<-rename(dt.mean.std,activity=V2)
names(dt.mean.std)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
dt.mean.std<-dt.mean.std[,-"activity"]
dt.mean.std<-dt.mean.std[,-c("activity")]
select(dt.mean.std,-c(activity))
dt.mean.std<-select(dt.mean.std,-c(activity))
names(dt.mean.std)
dt.mean.std<-rename(dt.mean.std,activity=V2)
names(dt.mean.std)
dt.mean.std<-cbind(dt.mean.std[,"activity"],dt.mean.std[,2:ncol(dt.mean.std)]
)
names(dt.mean.std)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
dt.mean.std<-select(dt.mean.std,-c(activity))
dt.mean.std<-dt.mean.std[,-c("activity")]
dt.mean.std<-rename(dt.mean.std,activity=V2)
dt.mean.std<-cbind(dt.mean.std[,"activity"],dt.mean.std[,2:ncol(dt.mean.std)-1])
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
dt.mean.std<-select(dt.mean.std,-c(activity))
dt.mean.std<-rename(dt.mean.std,activity=V2)
dt.mean.std<-cbind(dt.mean.std[,"activity"],dt.mean.std[,2:ncol(dt.mean.std)-1])
names(dt.mean.std)
names(dt.mean.std)[1]<-"activity"
names(dt.mean.std)
head(dt.mean.std)
#5. From the data set in step 4, creates a second,
# independent tidy data set with the average of each variable for each activity and each subject.
group_by(dt.mean.std,activity,subject)
?group_by
#Libraries
library(data.table)
library(dplyr)
#Setting working directory
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project")
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","dataset.zip")
#unzip("dataset.zip")
setwd("G:/Mi unidad/FORMACION/COURSERA/Data Science Specialization - John Hopkins/Getting and Cleaning Data/Getting and Cleaning Data - course project/UCI HAR Dataset")
#1. Merges the training and the test sets to create one data set.
#Read and fusion x data
x_train <- read.table("./train/X_train.txt")
x_test <- read.table("./test/X_test.txt")
x <- rbind(x_train,x_test)
#Read and fusion y data
y_train <- read.table("./train/Y_train.txt")
y_test <- read.table("./test/Y_test.txt")
y <- rbind(y_train,y_test)
#Read and fusion subject data
subject_train <- read.table("./train/subject_train.txt")
subject_test <- read.table("./test/subject_test.txt")
subject <- rbind(subject_train,subject_test)
#Read features names
features <- read.table("features.txt")
#Read activity labels
activity_labels <- read.table("activity_labels.txt")
#Create one data set with identity of each individual + inputs(x) + output(y)
dt <- cbind(subject,y,x)
#Remove datasets to increase available memory
rm(x_train,x_test,x)
rm(y_train,y_test,y)
rm(subject_train,subject_test,subject)
#4. Appropriately labels the data set with descriptive variable names.
# I prefer to change names before filtering data, as it is much easy then to work with the data
# We assign the first two names directly and we get the names of the features from the features dataset, transforming to lower case
names(dt) <- c("subject","activity",tolower(as.character(features[,2])))
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# We filter all the column names with the word mean or std + the two initial columns that should always be there
dt.mean.std<-dt[,c("subject","activity",grep("mean|std",names(dt),value=T))]
#3. Uses descriptive activity names to name the activities in the data set
dt.mean.std<-merge(dt.mean.std,activity_labels,by.x="activity",by.y="V1")
dt.mean.std<-select(dt.mean.std,-c(activity))
dt.mean.std<-rename(dt.mean.std,activity=V2)
dt.mean.std<-cbind(dt.mean.std[,"activity"],dt.mean.std[,2:ncol(dt.mean.std)-1])
names(dt.mean.std)[1]<-"activity"
names(dt.mean.std)
head(dt.mean.std)
#5. From the data set in step 4, creates a second,
# independent tidy data set with the average of each variable for each activity and each subject.
dt.bygroup <- group_by(dt.mean.std,activity,subject)
summarise(dt.bygroup,mean)
summarise(dt.bygroup,mean,mean(value))
summarise(dt.bygroup,mean=mean(value))
#5. From the data set in step 4, creates a second,
# independent tidy data set with the average of each variable for each activity and each subject.
dt.bygroup <- group_by(dt.mean.std,activity,subject)
summarise(dt.bygroup,mean(value))
?summarise
summarise(dt.bygroup,mean())
summarise(dt.bygroup,mean(tBodyAcc-mean()-X))
summarise(dt.bygroup,mean("tBodyAcc-mean()-X"))
summarise(dt.bygroup,mean(*))
summarise(dt.bygroup,mean(.))
summarise(dt.bygroup,mean(features[,2]))
